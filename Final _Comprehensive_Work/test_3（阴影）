#include <stdlib.h>
#include "glut.h"

float fRotate    = 0.0f; //��ת���ӣ���������ӣ�
float fScale     = 1.0f; //��������

float tRotate = 0.0f; //��ת���ӣ������

bool bPersp = false; //�Ƿ�Ϊ͸��ͶӰ ��vs ��ͶӰ��
bool bAnim = false; // ����������Ƿ���ת
bool bWire = false; // ����ģʽ�Ƿ�Ϊ���� ��vs ��䣩
bool isRotate = false; //����Ƿ���ת

int wHeight = 0;
int wWidth = 0;

int min(int x, int y)
{
	return x < y ? x : y;
}

//�����Ȳ�
void Draw_Leg() 
{
	glScalef(1, 1, 3);
	glutSolidCube(1.0);
}

void Draw_Scene(float place[])
{
	//�����
	glPushMatrix();
	glTranslatef(place[0], place[1], place[2]);//����ƽ��
	glRotatef(90, 1, 0, 0);
	glRotatef(tRotate, 0, 1, 0);//������ת
	glutSolidTeapot(1);
	glPopMatrix();


        //���ذ�
	glm::vec4 v1(-3, 0,-3, 1), v2(-3, 0, 3, 1), v3( 3, 0, 3, 1), v4( 3, 0,-3, 1);//�ĸ�����
        glm::mat4 m = glm::translate(glm::vec3(0.5f,0.5f,0.5f))
        * glm::scale(glm::vec3(0.5f,0.5f,0.5f)); // ��Ҫ���ü������[-1,+1]���ŵ�[0,1]
        glm::vec4 t;
        glBegin(GL_POLYGON);
    ����glNormal3f(0, 1, 0);
    ����t = m*shadow_mat_p*shadow_mat_v*v1; // ��������������ͬ�ı任������������
    ����glTexCoord4fv(&t[0]); glVertex3fv(&v1[0]);
    ����t = m*shadow_mat_p*shadow_mat_v*v2;
    ����glTexCoord4fv(&t[0]); glVertex3fv(&v2[0]);
    ����t = m*shadow_mat_p*shadow_mat_v*v3;
    ����glTexCoord4fv(&t[0]); glVertex3fv(&v3[0]);
    ����t = m*shadow_mat_p*shadow_mat_v*v4;
    ����glTexCoord4fv(&t[0]); glVertex3fv(&v4[0]);
    glEnd();
}

void updateView(int width, int height)
{
	glViewport(0,0,width,height);//�����Ӵ���С

	glMatrixMode(GL_PROJECTION);//���þ���ģʽΪͶӰ
	glLoadIdentity();	 //��ʼ������Ϊ��λ����  

	float whRatio = (GLfloat)width/(GLfloat)height;//������ʾ����

	if (bPersp){
		gluPerspective(45, whRatio, 1, 100); //͸��ͶӰ
		//������

		//GLdouble fovy �ӽ�
		//GLdouble aspect ���߱�
		//GLdouble zNear ����
		//GLdouble zFar Զ��
	}
	else
		glOrtho(-3 ,3, -3, 3,-100,100); //��ͶӰ
	    //����

		//GLdouble left,
		//GLdouble right,
		//GLdouble bottom,
		//GLdouble top,
		//GLdouble near,
		//GLdouble far

	glMatrixMode(GL_MODELVIEW);	//���þ���ģʽΪģ��
}

void reshape(int width, int height)
{
	if (height==0)	//����߶�Ϊ0
	{
		height=1;	//�ø߶�Ϊ1��������ַ�ĸΪ0������
	}

	height = width = min(height, width);
	wHeight = height;
	wWidth = width;
	
	updateView(wHeight, wWidth); //�����ӽ�
}

void idle() 
{
	glutPostRedisplay();//���õ�ǰ���ƺ��� 
}

float eye[] = {0, 0, 8};
float center[] = {0, 0, 0};
float place[] = {0, 0, 5};



void redraw()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); //�����ɫ�������Ȼ���
	glLoadIdentity(); //��ʼ������Ϊ��λ����

	gluLookAt(eye[0], eye[1], eye[2],
		center[0], center[1], center[2],
		0, 1, 0);			

	//  �۲�λ��(eye[0],eye[1],eye[2]
	//	����λ��(center[0],center[1],center[2]
	//	�۲췽��(x, y, z) 

	if (bWire) {
		glPolygonMode(GL_FRONT_AND_BACK, GL_LINE); //���ö���λ���ģʽ�������棬����  
	}
	else {
		glPolygonMode(GL_FRONT_AND_BACK, GL_FILL); //���ö���λ���ģʽ�������棬���  
	}

	glEnable(GL_DEPTH_TEST);  //������Ȳ���
	glEnable(GL_LIGHTING); //��������ģʽ
	GLfloat white[] = { 1.0, 1.0, 1.0, 1.0 }; // ������ɫ
	GLfloat light_pos[] = {5,5,5,1};  //�����Դλ��

	glLightfv(GL_LIGHT0, GL_POSITION, light_pos); //���õ�0�Ź�Դ�Ĺ���λ��
	glLightfv(GL_LIGHT0, GL_AMBIENT, white); //���õ�0�Ź�Դ��η����Ĺ�����ɫ����������ɫ��
	glEnable(GL_LIGHT0); //������0�Ź�Դ
	Draw_Scene(place); //��������
	
	

	glutSwapBuffers(); //����������  
}

int main (int argc,  char *argv[])
{
	glutInit(&argc, argv);//��glut�ĳ�ʼ�� 
	glutInitDisplayMode(GLUT_RGBA | GLUT_DEPTH | GLUT_DOUBLE);//��ʼ����ʾģʽ:RGB��ɫģ�ͣ���Ȳ��ԣ�˫����   
	glutInitWindowSize(480,480);//���ô��ڴ�С  
	int windowHandle = glutCreateWindow("Ex 3");//���ô��ڱ���   

	glutDisplayFunc(redraw);//ע����ƻص�����  
	glutReshapeFunc(reshape);//ע���ػ�ص����� 
	glutKeyboardFunc(key);//ע�ᰴ���ص�����
	glutIdleFunc(idle);//ע��ȫ�ֻص�����������ʱ����  

	glutMainLoop();// glut�¼�����ѭ��
	return 0;
}


